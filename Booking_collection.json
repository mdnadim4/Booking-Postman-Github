{
	"info": {
		"_postman_id": "573a197f-aa0f-408c-a959-3ed7b1568098",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"token\": \"a59a6a647fa91d6\"\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"token\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"token\": {\r",
							"            \"$id\": \"#/properties/token\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The token schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"a59a6a647fa91d6\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"pm.environment.set(\"token\", jsonData.token)\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\t// pm.response.to.have.status(200);\r",
							"\tpm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"\t// pm.response.to.have.status(\"OK\");\r",
							"\tpm.expect(pm.response.status).to.include(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body response is JSON Object\", function() {\r",
							"\tpm.response.to.have.jsonBody();\r",
							"})\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify JSON data properties\", function () {\r",
							"\tpm.expect(jsonData).have.property(\"token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify JSON data value\", function() {\r",
							"\tpm.expect(jsonData.token).to.eql(pm.environment.get(\"token\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Verify json response with input data\", function() {\r",
							"\tpm.expect(jsonData.token).to.eql(pm.environment.get(\"token\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Verify JSON data type of response\", function() {\r",
							"\tpm.expect(jsonData.token).to.be.a(\"string\");\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"\tpm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"\t// pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"\tpm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"\tpm.response.to.have.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Resonse should must be valid\", function() {\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"})\r",
							"\r",
							"pm.test(\"Resonse should not be error\", function() {\r",
							"\tpm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test(\"Validation of schema\", function() {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify the environment name\", function() {\r",
							"\tpm.expect(pm.environment.name).to.eql(\"Booking\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Booking",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"bookingid\": 32,\r",
							"            \"booking\": {\r",
							"                \"firstname\": \"Ora\",\r",
							"                \"lastname\": \"Miller\",\r",
							"                \"totalprice\": 90,\r",
							"                \"depositpaid\": true,\r",
							"                \"bookingdates\": {\r",
							"                    \"checkin\": \"2018-01-01\",\r",
							"                    \"checkout\": \"2019-01-01\"\r",
							"                },\r",
							"                \"additionalneeds\": \"Breakfast\"\r",
							"            }\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"bookingid\",\r",
							"        \"booking\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"bookingid\": {\r",
							"            \"$id\": \"#/properties/bookingid\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The bookingid schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                32\r",
							"            ]\r",
							"        },\r",
							"        \"booking\": {\r",
							"            \"$id\": \"#/properties/booking\",\r",
							"            \"type\": \"object\",\r",
							"            \"title\": \"The booking schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": {},\r",
							"            \"examples\": [\r",
							"                {\r",
							"                    \"firstname\": \"Ora\",\r",
							"                    \"lastname\": \"Miller\",\r",
							"                    \"totalprice\": 90,\r",
							"                    \"depositpaid\": true,\r",
							"                    \"bookingdates\": {\r",
							"                        \"checkin\": \"2018-01-01\",\r",
							"                        \"checkout\": \"2019-01-01\"\r",
							"                    },\r",
							"                    \"additionalneeds\": \"Breakfast\"\r",
							"                }\r",
							"            ],\r",
							"            \"required\": [\r",
							"                \"firstname\",\r",
							"                \"lastname\",\r",
							"                \"totalprice\",\r",
							"                \"depositpaid\",\r",
							"                \"bookingdates\",\r",
							"                \"additionalneeds\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"firstname\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/firstname\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"The firstname schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": \"\",\r",
							"                    \"examples\": [\r",
							"                        \"Ora\"\r",
							"                    ]\r",
							"                },\r",
							"                \"lastname\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/lastname\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"The lastname schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": \"\",\r",
							"                    \"examples\": [\r",
							"                        \"Miller\"\r",
							"                    ]\r",
							"                },\r",
							"                \"totalprice\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/totalprice\",\r",
							"                    \"type\": \"integer\",\r",
							"                    \"title\": \"The totalprice schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        90\r",
							"                    ]\r",
							"                },\r",
							"                \"depositpaid\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/depositpaid\",\r",
							"                    \"type\": \"boolean\",\r",
							"                    \"title\": \"The depositpaid schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": false,\r",
							"                    \"examples\": [\r",
							"                        true\r",
							"                    ]\r",
							"                },\r",
							"                \"bookingdates\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/bookingdates\",\r",
							"                    \"type\": \"object\",\r",
							"                    \"title\": \"The bookingdates schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": {},\r",
							"                    \"examples\": [\r",
							"                        {\r",
							"                            \"checkin\": \"2018-01-01\",\r",
							"                            \"checkout\": \"2019-01-01\"\r",
							"                        }\r",
							"                    ],\r",
							"                    \"required\": [\r",
							"                        \"checkin\",\r",
							"                        \"checkout\"\r",
							"                    ],\r",
							"                    \"properties\": {\r",
							"                        \"checkin\": {\r",
							"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkin\",\r",
							"                            \"type\": \"string\",\r",
							"                            \"title\": \"The checkin schema\",\r",
							"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                            \"default\": \"\",\r",
							"                            \"examples\": [\r",
							"                                \"2018-01-01\"\r",
							"                            ]\r",
							"                        },\r",
							"                        \"checkout\": {\r",
							"                            \"$id\": \"#/properties/booking/properties/bookingdates/properties/checkout\",\r",
							"                            \"type\": \"string\",\r",
							"                            \"title\": \"The checkout schema\",\r",
							"                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                            \"default\": \"\",\r",
							"                            \"examples\": [\r",
							"                                \"2019-01-01\"\r",
							"                            ]\r",
							"                        }\r",
							"                    },\r",
							"                    \"additionalProperties\": true\r",
							"                },\r",
							"                \"additionalneeds\": {\r",
							"                    \"$id\": \"#/properties/booking/properties/additionalneeds\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"The additionalneeds schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": \"\",\r",
							"                    \"examples\": [\r",
							"                        \"Breakfast\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"\r",
							"jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"\t// pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"\tpm.response.to.have.status(\"OK\");\r",
							"\t// pm.expect(pm.response.status).to.include(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body response is JSON Object\", function() {\r",
							"\tpm.response.to.have.jsonBody();\r",
							"})\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify JSON data properties\", function () {\r",
							"\tpm.expect(jsonData).have.property(\"bookingid\");\r",
							"\tpm.expect(jsonData.booking).have.property(\"firstname\");\r",
							"\tpm.expect(jsonData.booking).have.property(\"lastname\");\r",
							"\tpm.expect(jsonData.booking).have.property(\"totalprice\");\r",
							"\tpm.expect(jsonData.booking).have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data type of response\", function() {\r",
							"\tpm.expect(jsonData.bookingid).to.be.a(\"number\");\r",
							"\tpm.expect(jsonData.booking).to.be.an(\"object\");\r",
							"\tpm.expect(jsonData.booking.firstname).to.be.a(\"string\");\r",
							"})\r",
							"\r",
							"pm.test(\"Verify JSON data value\", function() {\r",
							"\tpm.expect(jsonData.bookingid).to.eql(pm.environment.get(\"id\"));\r",
							"\tpm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"\tpm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"\tpm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"\tpm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");\r",
							"})\r",
							"\r",
							"pm.test(\"Verify json response with input data\", function() {\r",
							"\tpm.expect(jsonData.bookingid).to.eql(pm.environment.get(\"id\"));\r",
							"\tpm.expect(jsonData.booking.firstname).to.eql(pm.collectionVariables.get(\"firstname\"));\r",
							"\tpm.expect(jsonData.booking.lastname).to.eql(pm.collectionVariables.get(\"lastname\"));\r",
							"\tpm.expect(jsonData.booking.totalprice).to.eql(pm.collectionVariables.get(\"totalprice\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"\tpm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"\tpm.response.to.have.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"\t// pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"\tpm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Resonse should must be valid\", function() {\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test(\"Resonse should not be error\", function() {\r",
							"\tpm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test(\"Validation the schema\", function() {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const firstname = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"const lastname = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"const price = Math.round(pm.variables.replaceIn('{{$randomPrice}}'));\r",
							"\r",
							"pm.collectionVariables.set(\"firstname\",firstname);\r",
							"pm.collectionVariables.set(\"lastname\", lastname);\r",
							"pm.collectionVariables.set(\"totalprice\", price);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking ID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const additionalneeds = pm.variables.replaceIn('{{$randomJobType}}');\r",
							"\r",
							"pm.collectionVariables.set(\"additionalneeds\", additionalneeds);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"firstname\": \"Tyrell\",\r",
							"            \"lastname\": \"Erdman\",\r",
							"            \"totalprice\": 939,\r",
							"            \"depositpaid\": true,\r",
							"            \"bookingdates\": {\r",
							"                \"checkin\": \"2018-01-01\",\r",
							"                \"checkout\": \"2019-01-01\"\r",
							"            },\r",
							"            \"additionalneeds\": \"Supervisor\"\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"firstname\",\r",
							"        \"lastname\",\r",
							"        \"totalprice\",\r",
							"        \"depositpaid\",\r",
							"        \"bookingdates\",\r",
							"        \"additionalneeds\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"firstname\": {\r",
							"            \"$id\": \"#/properties/firstname\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The firstname schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Tyrell\"\r",
							"            ]\r",
							"        },\r",
							"        \"lastname\": {\r",
							"            \"$id\": \"#/properties/lastname\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The lastname schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Erdman\"\r",
							"            ]\r",
							"        },\r",
							"        \"totalprice\": {\r",
							"            \"$id\": \"#/properties/totalprice\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The totalprice schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                939\r",
							"            ]\r",
							"        },\r",
							"        \"depositpaid\": {\r",
							"            \"$id\": \"#/properties/depositpaid\",\r",
							"            \"type\": \"boolean\",\r",
							"            \"title\": \"The depositpaid schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": false,\r",
							"            \"examples\": [\r",
							"                true\r",
							"            ]\r",
							"        },\r",
							"        \"bookingdates\": {\r",
							"            \"$id\": \"#/properties/bookingdates\",\r",
							"            \"type\": \"object\",\r",
							"            \"title\": \"The bookingdates schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": {},\r",
							"            \"examples\": [\r",
							"                {\r",
							"                    \"checkin\": \"2018-01-01\",\r",
							"                    \"checkout\": \"2019-01-01\"\r",
							"                }\r",
							"            ],\r",
							"            \"required\": [\r",
							"                \"checkin\",\r",
							"                \"checkout\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"checkin\": {\r",
							"                    \"$id\": \"#/properties/bookingdates/properties/checkin\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"The checkin schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": \"\",\r",
							"                    \"examples\": [\r",
							"                        \"2018-01-01\"\r",
							"                    ]\r",
							"                },\r",
							"                \"checkout\": {\r",
							"                    \"$id\": \"#/properties/bookingdates/properties/checkout\",\r",
							"                    \"type\": \"string\",\r",
							"                    \"title\": \"The checkout schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": \"\",\r",
							"                    \"examples\": [\r",
							"                        \"2019-01-01\"\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        },\r",
							"        \"additionalneeds\": {\r",
							"            \"$id\": \"#/properties/additionalneeds\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The additionalneeds schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Supervisor\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							"\t// pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"\tpm.response.to.have.status(\"OK\");\r",
							"\t// pm.expect(pm.response.status).to.include(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body response is JSON Object\", function() {\r",
							"\tpm.response.to.have.jsonBody();\r",
							"})\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify JSON data properties\", function () {\r",
							"\tpm.expect(jsonData).have.property(\"firstname\");\r",
							"\tpm.expect(jsonData).have.property(\"lastname\");\r",
							"\tpm.expect(jsonData).have.property(\"totalprice\");\r",
							"\tpm.expect(jsonData).have.property(\"depositpaid\");\r",
							"\tpm.expect(jsonData).have.property(\"bookingdates\");\r",
							"\tpm.expect(jsonData).have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify data type of response\", function() {\r",
							"\tpm.expect(jsonData.firstname).to.be.a(\"string\");\r",
							"\tpm.expect(jsonData.lastname).to.be.a(\"string\");\r",
							"\tpm.expect(jsonData.depositpaid).to.be.a(\"boolean\");\r",
							"\tpm.expect(jsonData.bookingdates).to.be.an(\"object\");\r",
							"\tpm.expect(jsonData.additionalneeds).to.be.a(\"string\");\r",
							"})\r",
							"\r",
							"pm.test(\"Verify JSON data value\", function() {\r",
							"\tpm.expect(jsonData.additionalneeds).to.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Verify json response with input data\", function() {\r",
							"\tpm.expect(jsonData.additionalneeds).to.eql(pm.collectionVariables.get(\"additionalneeds\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"\tpm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"\tpm.response.to.have.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"\t// pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"\tpm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Resonse should must be valid\", function() {\r",
							"\tpm.response.to.be.ok;\r",
							"\tpm.response.to.be.json;\r",
							"\tpm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test(\"Resonse should not be error\", function() {\r",
							"\tpm.response.to.not.be.error;\r",
							"})\r",
							"\r",
							"pm.test(\"Validation the schema\", function() {\r",
							"\tpm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"additionalneeds\": \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"\tpm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "firstname",
			"value": ""
		},
		{
			"key": "lastname",
			"value": ""
		},
		{
			"key": "totalprice",
			"value": ""
		},
		{
			"key": "breakfast",
			"value": ""
		},
		{
			"key": "additionalneeds",
			"value": ""
		}
	]
}